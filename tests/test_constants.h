/**
 * @file test_constants.h
 * @brief Shared test constants for Tesla BLE protocol tests
 * 
 * This file contains cryptographic keys, test vectors, and other constants
 * that are reused across multiple test files. All keys are from the protocol
 * specification and should NEVER be used in production.
 */

#pragma once

#include <cstdint>
#include <memory>
#include <cstring>
#include "client.h"

namespace TeslaBLE {
namespace TestConstants {

    // Test VINs
    static constexpr const char* TEST_VIN = "5YJ30123456789ABC";
    static constexpr const char* LONG_VIN = "1HGCM82633A004352"; // Different format for edge testing

    // Vehicle test key from protocol spec (DO NOT USE IN PRODUCTION)
    static constexpr const char* VEHICLE_PRIVATE_KEY_PEM = 
        "-----BEGIN EC PRIVATE KEY-----\n"
        "MHcCAQEEIDRO5bRmp88e6xK29QMx2y5exYNO9fS+/P2MvlXCUo1woAoGCCqGSM49\n"
        "AwEHoUQDQgAEx6H0cThIaqRymXFJSHjTOxok45Vx90im4WxZVbPYd9OmqqDpVRZk\n"
        "dK9dMsQQ9DmiI0E3rRuwhf1OiBPJWPEdlw==\n"
        "-----END EC PRIVATE KEY-----";

    // Client test key from protocol spec (DO NOT USE IN PRODUCTION)  
    static constexpr const char* CLIENT_PRIVATE_KEY_PEM =
        "-----BEGIN EC PRIVATE KEY-----\n"
        "MHcCAQEEICU4zcKal8GcHpmmN9bPT4yXDBGLVu3h5jI+bRYsSzDboAoGCCqGSM49\n"
        "AwEHoUQDQgAEsra8aMLaBmXOZWgVWUmWxiOU7di+qQX+eBp1T+aoRacUMwkC8iXp\n"
        "Jp1GbgWzSZgf2p2FzCPG+0RKpztikQXcbg==\n"
        "-----END EC PRIVATE KEY-----";

    // Expected public keys from protocol spec
    static constexpr uint8_t EXPECTED_CLIENT_PUBLIC_KEY[65] = {
        0x04, 0xb2, 0xb6, 0xbc, 0x68, 0xc2, 0xda, 0x06, 0x65, 0xce, 0x65, 0x68, 0x15, 0x59, 0x49, 0x96,
        0xc6, 0x23, 0x94, 0xed, 0xd8, 0xbe, 0xa9, 0x05, 0xfe, 0x78, 0x1a, 0x75, 0x4f, 0xe6, 0xa8, 0x45,
        0xa7, 0x14, 0x33, 0x09, 0x02, 0xf2, 0x25, 0xe9, 0x26, 0x9d, 0x46, 0x6e, 0x05, 0xb3, 0x49, 0x98,
        0x1f, 0xda, 0x9d, 0x85, 0xcc, 0x23, 0xc6, 0xfb, 0x44, 0x4a, 0xa7, 0x3b, 0x62, 0x91, 0x05, 0xdc,
        0x6e
    };

    static constexpr uint8_t EXPECTED_VEHICLE_PUBLIC_KEY[65] = {
        0x04, 0xc7, 0xa1, 0xf4, 0x71, 0x38, 0x48, 0x6a, 0xa4, 0x72, 0x99, 0x71, 0x49, 0x48, 0x78, 0xd3,
        0x3b, 0x1a, 0x24, 0xe3, 0x95, 0x71, 0xf7, 0x48, 0xa6, 0xe1, 0x6c, 0x59, 0x55, 0xb3, 0xd8, 0x77,
        0xd3, 0xa6, 0xaa, 0xa0, 0xe9, 0x55, 0x16, 0x64, 0x74, 0xaf, 0x5d, 0x32, 0xc4, 0x10, 0xf4, 0x39,
        0xa2, 0x23, 0x41, 0x37, 0xad, 0x1b, 0xb0, 0x85, 0xfd, 0x4e, 0x88, 0x13, 0xc9, 0x58, 0xf1, 0x1d,
        0x97
    };

    // Expected session key from protocol spec (first 16 bytes of SHA-1 of shared secret)
    static constexpr uint8_t EXPECTED_SESSION_KEY[16] = {
        0x1b, 0x2f, 0xce, 0x19, 0x96, 0x7b, 0x79, 0xdb, 0x69, 0x6f, 0x90, 0x9c, 0xff, 0x89, 0xea, 0x9a
    };

    // Test epoch from protocol spec
    static constexpr uint8_t TEST_EPOCH[16] = {
        0x4c, 0x46, 0x3f, 0x9c, 0xc0, 0xd3, 0xd2, 0x69,
        0x06, 0xe9, 0x82, 0xed, 0x22, 0x4a, 0xdd, 0xe6
    };

    // Test authentication tag for AES-GCM (from protocol spec)
    static constexpr uint8_t EXPECTED_AUTH_TAG[16] = {
        0x49, 0x63, 0xa4, 0xd7, 0x8b, 0x1a, 0xd8, 0x78, 0x2a, 0xcc, 0x44, 0x1b, 0x68, 0x31, 0x99, 0xd0
    };

    // Expected HMAC-SHA256 result for "authenticated command" (from protocol spec)
    static constexpr uint8_t EXPECTED_HMAC_AUTH_COMMAND[32] = {
        0xa2, 0x47, 0x8e, 0x6c, 0xfa, 0xce, 0x4e, 0xd6, 0x4b, 0x4e, 0x7c, 0x7c, 0x68, 0x4e, 0xbe, 0xf7,
        0x35, 0x4d, 0xf0, 0x71, 0x51, 0x26, 0xef, 0xfa, 0xf5, 0xa1, 0x2c, 0xa4, 0xd5, 0x45, 0x04, 0xeb
    };

    // Test request hash from protocol spec
    static constexpr uint8_t EXPECTED_REQUEST_HASH[32] = {
        0x99, 0x6c, 0x1f, 0xe3, 0x83, 0x31, 0xbe, 0x13, 0x8f, 0x80, 0x39, 0xc1, 0x94, 0xb1, 0x4d, 0xb2,
        0x19, 0x88, 0x46, 0xed, 0x7d, 0x82, 0x51, 0xe6, 0x74, 0x92, 0x84, 0xd7, 0xb3, 0x2e, 0xa0, 0x02
    };

    // Common test values
    static constexpr uint32_t TEST_COUNTER = 100;
    static constexpr uint32_t TEST_CLOCK_TIME = 1000;
    static constexpr uint32_t TEST_EXPIRES_AT = 2000;

    // Mock data for testing (duplicated across test files)
    static constexpr pb_byte_t MOCK_VCSEC_MESSAGE[177] = {
        0x32, 0x12, 0x12, 0x10, 0x2f, 0xdd, 0xc1, 0x45, 0xca, 0xcc, 0xca, 0x43, 0x05, 0x66, 0x37, 0x0d, 
        0xf1, 0x49, 0x85, 0x5d, 0x3a, 0x02, 0x08, 0x02, 0x7a, 0x5e, 0x08, 0x01, 0x12, 0x41, 0x04, 0xc7, 
        0xa1, 0xf4, 0x71, 0x38, 0x48, 0x6a, 0xa4, 0x72, 0x99, 0x71, 0x49, 0x48, 0x78, 0xd3, 0x3b, 0x1a, 
        0x24, 0xe3, 0x95, 0x71, 0xf7, 0x48, 0xa6, 0xe1, 0x6c, 0x59, 0x55, 0xb3, 0xd8, 0x77, 0xd3, 0xa6, 
        0xaa, 0xa0, 0xe9, 0x55, 0x16, 0x64, 0x74, 0xaf, 0x5d, 0x32, 0xc4, 0x10, 0xf4, 0x39, 0xa2, 0x23, 
        0x41, 0x37, 0xad, 0x1b, 0xb0, 0x85, 0xfd, 0x4e, 0x88, 0x13, 0xc9, 0x58, 0xf1, 0x1d, 0x97, 0x1a, 
        0x10, 0x4c, 0x46, 0x3f, 0x9c, 0xc0, 0xd3, 0xd2, 0x69, 0x06, 0xe9, 0x82, 0xed, 0x22, 0x4a, 0xdd, 
        0xe6, 0x25, 0x85, 0x4a, 0x00, 0x00, 0x30, 0x06, 0x6a, 0x24, 0x32, 0x22, 0x0a, 0x20, 0x5a, 0x0d, 
        0x3c, 0x7c, 0xb0, 0x2c, 0x04, 0xd9, 0x12, 0xa3, 0x58, 0x8b, 0xc2, 0xa6, 0xfd, 0x8c, 0x00, 0xf2, 
        0x44, 0x09, 0x1b, 0xdd, 0x9d, 0xfe, 0x46, 0xfc, 0xdc, 0x47, 0x06, 0x41, 0x5b, 0x26, 0x92, 0x03, 
        0x10, 0x3c, 0xcc, 0xe3, 0xd5, 0x1a, 0x6f, 0x3c, 0x2a, 0xee, 0xa8, 0x91, 0x36, 0x44, 0xa7, 0x05, 0x84
    };

    static constexpr pb_byte_t MOCK_INFOTAINMENT_MESSAGE[177] = {
        0x32, 0x12, 0x12, 0x10, 0x8f, 0x3d, 0x24, 0x4b, 0x50, 0xb0, 0x7a, 0x98, 0x42, 0xca, 0xc1, 0x08, 
        0xc9, 0x28, 0xb5, 0xe7, 0x3a, 0x02, 0x08, 0x03, 0x7a, 0x5e, 0x08, 0x01, 0x12, 0x41, 0x04, 0xc7, 
        0xa1, 0xf4, 0x71, 0x38, 0x48, 0x6a, 0xa4, 0x72, 0x99, 0x71, 0x49, 0x48, 0x78, 0xd3, 0x3b, 0x1a, 
        0x24, 0xe3, 0x95, 0x71, 0xf7, 0x48, 0xa6, 0xe1, 0x6c, 0x59, 0x55, 0xb3, 0xd8, 0x77, 0xd3, 0xa6, 
        0xaa, 0xa0, 0xe9, 0x55, 0x16, 0x64, 0x74, 0xaf, 0x5d, 0x32, 0xc4, 0x10, 0xf4, 0x39, 0xa2, 0x23, 
        0x41, 0x37, 0xad, 0x1b, 0xb0, 0x85, 0xfd, 0x4e, 0x88, 0x13, 0xc9, 0x58, 0xf1, 0x1d, 0x97, 0x1a, 
        0x10, 0x4c, 0x46, 0x3f, 0x9c, 0xc0, 0xd3, 0xd2, 0x69, 0x06, 0xe9, 0x82, 0xed, 0x22, 0x4a, 0xdd, 
        0xe6, 0x25, 0x5f, 0x0a, 0x00, 0x00, 0x30, 0x07, 0x6a, 0x24, 0x32, 0x22, 0x0a, 0x20, 0x8e, 0x8d, 
        0xcd, 0x16, 0x4e, 0xf3, 0x61, 0xfd, 0x12, 0x3c, 0x46, 0xc2, 0xb2, 0xbd, 0xfd, 0x1f, 0xc9, 0x30, 
        0x56, 0xf4, 0xef, 0x32, 0xc9, 0x31, 0x1a, 0x27, 0x5d, 0xb9, 0x08, 0xd4, 0xd2, 0x3f, 0x92, 0x03, 
        0x10, 0x0a, 0x40, 0x4e, 0xc0, 0xfc, 0x9a, 0xa8, 0x63, 0xae, 0xc3, 0xe5, 0x01, 0x96, 0xfb, 0xf3, 0x0b
    };

    // Connection ID for testing
    static constexpr pb_byte_t TEST_CONNECTION_ID[16] = {
        0x93, 0x4f, 0x10, 0x69, 0x1d, 0xed, 0xa8, 0x26, 
        0xa7, 0x98, 0x2e, 0x92, 0xc4, 0xfc, 0xe8, 0x3f
    };

    // Truly invalid private key for negative testing
    static constexpr const char* INVALID_PRIVATE_KEY = "invalid_key_data_that_should_fail";

    // Utility functions for common test operations
    namespace TestUtils {
        
        /**
         * @brief Create a basic client with loaded test key
         */
        inline std::unique_ptr<Client> createTestClient() {
            auto client = std::make_unique<Client>();
            client->setVIN(TEST_VIN);
            int status = client->loadPrivateKey(
                reinterpret_cast<const unsigned char*>(CLIENT_PRIVATE_KEY_PEM), 
                strlen(CLIENT_PRIVATE_KEY_PEM) + 1
            );
            if (status != 0) {
                return nullptr;
            }
            client->setConnectionID(TEST_CONNECTION_ID);
            return client;
        }

        /**
         * @brief Convert bytes to hex string for testing
         */
        inline std::string bytesToHex(const uint8_t* bytes, size_t length) {
            std::stringstream ss;
            ss << std::hex << std::setfill('0');
            for (size_t i = 0; i < length; ++i) {
                ss << std::setw(2) << static_cast<int>(bytes[i]);
            }
            return ss.str();
        }

        /**
         * @brief Convert hex string to bytes for testing
         */
        inline void hexToBytes(const std::string& hex, uint8_t* bytes) {
            for (size_t i = 0; i < hex.length(); i += 2) {
                std::string byteString = hex.substr(i, 2);
                bytes[i/2] = static_cast<uint8_t>(strtol(byteString.c_str(), nullptr, 16));
            }
        }

    } // namespace TestUtils

} // namespace TestConstants
} // namespace TeslaBLE
